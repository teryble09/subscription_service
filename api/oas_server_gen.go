// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// SubscriptionCalculateTotalCostPost implements POST /subscription/calculate-total-cost operation.
	//
	// Вычисляет сумму всех подписок за выбранный период с
	// фильтрацией по пользователю и названию сервиса.
	//
	// POST /subscription/calculate-total-cost
	SubscriptionCalculateTotalCostPost(ctx context.Context, req *CalculateTotalCostReq) (SubscriptionCalculateTotalCostPostRes, error)
	// SubscriptionGet implements GET /subscription operation.
	//
	// Возвращает список всех активных подписок.
	//
	// GET /subscription
	SubscriptionGet(ctx context.Context) (SubscriptionGetRes, error)
	// SubscriptionIDDelete implements DELETE /subscription/{id} operation.
	//
	// Удаляет подписку по указанному ID.
	//
	// DELETE /subscription/{id}
	SubscriptionIDDelete(ctx context.Context, params SubscriptionIDDeleteParams) (SubscriptionIDDeleteRes, error)
	// SubscriptionIDGet implements GET /subscription/{id} operation.
	//
	// Возвращает информацию о подписке по указанному ID.
	//
	// GET /subscription/{id}
	SubscriptionIDGet(ctx context.Context, params SubscriptionIDGetParams) (SubscriptionIDGetRes, error)
	// SubscriptionIDPatch implements PATCH /subscription/{id} operation.
	//
	// Обновляет существующую подписку.
	//
	// PATCH /subscription/{id}
	SubscriptionIDPatch(ctx context.Context, req *UpdateSubscriptionReq, params SubscriptionIDPatchParams) (SubscriptionIDPatchRes, error)
	// SubscriptionPost implements POST /subscription operation.
	//
	// Создает новую подписку для пользователя.
	//
	// POST /subscription
	SubscriptionPost(ctx context.Context, req *CreateSubscriptionReq) (SubscriptionPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
