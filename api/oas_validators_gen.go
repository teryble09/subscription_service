// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CalculateTotalCostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.StartPeriod.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^(0[1-9]|1[0-2])-\\d{4}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start_period",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndPeriod.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^(0[1-9]|1[0-2])-\\d{4}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_period",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreateSubscriptionReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           0,
			MaxSet:        false,
			Max:           0,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.Price)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "price",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    7,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(0[1-9]|1[0-2])-\\d{4}$"],
		}).Validate(string(s.StartDate)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start_date",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndDate.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^(0[1-9]|1[0-2])-\\d{4}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_date",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListSubscriptionsRes) Validate() error {
	alias := ([]Subscription)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Subscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           0,
			MaxSet:        false,
			Max:           0,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.Price)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "price",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    7,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(0[1-9]|1[0-2])-\\d{4}$"],
		}).Validate(string(s.StartDate)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start_date",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndDate.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^(0[1-9]|1[0-2])-\\d{4}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_date",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateSubscriptionReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Price.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StartDate.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^(0[1-9]|1[0-2])-\\d{4}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start_date",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndDate.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^(0[1-9]|1[0-2])-\\d{4}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_date",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
