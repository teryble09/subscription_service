// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/google/uuid"
)

// Данные для подсчета суммарной стоимости подписок.
// Ref: #/components/schemas/CalculateTotalCostReq
type CalculateTotalCostReq struct {
	// Идентификатор пользователя (фильтр).
	UserID OptUUID `json:"user_id"`
	// Название сервиса (фильтр).
	ServiceName OptString `json:"service_name"`
	// Дата начала периода в формате MM-YYYY (фильтр).
	StartPeriod OptString `json:"start_period"`
	// Дата окончания периода в формате MM-YYYY (фильтр).
	EndPeriod OptString `json:"end_period"`
}

// GetUserID returns the value of UserID.
func (s *CalculateTotalCostReq) GetUserID() OptUUID {
	return s.UserID
}

// GetServiceName returns the value of ServiceName.
func (s *CalculateTotalCostReq) GetServiceName() OptString {
	return s.ServiceName
}

// GetStartPeriod returns the value of StartPeriod.
func (s *CalculateTotalCostReq) GetStartPeriod() OptString {
	return s.StartPeriod
}

// GetEndPeriod returns the value of EndPeriod.
func (s *CalculateTotalCostReq) GetEndPeriod() OptString {
	return s.EndPeriod
}

// SetUserID sets the value of UserID.
func (s *CalculateTotalCostReq) SetUserID(val OptUUID) {
	s.UserID = val
}

// SetServiceName sets the value of ServiceName.
func (s *CalculateTotalCostReq) SetServiceName(val OptString) {
	s.ServiceName = val
}

// SetStartPeriod sets the value of StartPeriod.
func (s *CalculateTotalCostReq) SetStartPeriod(val OptString) {
	s.StartPeriod = val
}

// SetEndPeriod sets the value of EndPeriod.
func (s *CalculateTotalCostReq) SetEndPeriod(val OptString) {
	s.EndPeriod = val
}

// Ref: #/components/schemas/CreateSubscriptionReq
type CreateSubscriptionReq struct {
	// Название сервиса, на который оформляется подписка.
	ServiceName string `json:"service_name"`
	// Цена подписки в рублях, без копеек.
	Price int `json:"price"`
	// Идентификатор пользователя.
	UserID uuid.UUID `json:"user_id"`
	// Дата начала подписки в формате MM-YYYY.
	StartDate string `json:"start_date"`
	// Дата окончания подписки в формате MM-YYYY (опционально).
	EndDate OptString `json:"end_date"`
}

// GetServiceName returns the value of ServiceName.
func (s *CreateSubscriptionReq) GetServiceName() string {
	return s.ServiceName
}

// GetPrice returns the value of Price.
func (s *CreateSubscriptionReq) GetPrice() int {
	return s.Price
}

// GetUserID returns the value of UserID.
func (s *CreateSubscriptionReq) GetUserID() uuid.UUID {
	return s.UserID
}

// GetStartDate returns the value of StartDate.
func (s *CreateSubscriptionReq) GetStartDate() string {
	return s.StartDate
}

// GetEndDate returns the value of EndDate.
func (s *CreateSubscriptionReq) GetEndDate() OptString {
	return s.EndDate
}

// SetServiceName sets the value of ServiceName.
func (s *CreateSubscriptionReq) SetServiceName(val string) {
	s.ServiceName = val
}

// SetPrice sets the value of Price.
func (s *CreateSubscriptionReq) SetPrice(val int) {
	s.Price = val
}

// SetUserID sets the value of UserID.
func (s *CreateSubscriptionReq) SetUserID(val uuid.UUID) {
	s.UserID = val
}

// SetStartDate sets the value of StartDate.
func (s *CreateSubscriptionReq) SetStartDate(val string) {
	s.StartDate = val
}

// SetEndDate sets the value of EndDate.
func (s *CreateSubscriptionReq) SetEndDate(val OptString) {
	s.EndDate = val
}

// Ref: #/components/schemas/Error
type Error struct {
	// Описание ошибки.
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *Error) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error) SetError(val string) {
	s.Error = val
}

func (*Error) subscriptionGetRes() {}

type ListSubscriptionsRes []Subscription

func (*ListSubscriptionsRes) subscriptionGetRes() {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Запись о подписке.
// Ref: #/components/schemas/Subscription
type Subscription struct {
	// Уникальный идентификатор подписки.
	ID int `json:"id"`
	// Название сервиса, на который оформлена подписка.
	ServiceName string `json:"service_name"`
	// Цена подписки в рублях, без копеек.
	Price int `json:"price"`
	// Идентификатор пользователя.
	UserID uuid.UUID `json:"user_id"`
	// Дата начала подписки в формате MM-YYYY.
	StartDate string `json:"start_date"`
	// Дата окончания подписки в формате MM-YYYY (опционально).
	EndDate OptString `json:"end_date"`
}

// GetID returns the value of ID.
func (s *Subscription) GetID() int {
	return s.ID
}

// GetServiceName returns the value of ServiceName.
func (s *Subscription) GetServiceName() string {
	return s.ServiceName
}

// GetPrice returns the value of Price.
func (s *Subscription) GetPrice() int {
	return s.Price
}

// GetUserID returns the value of UserID.
func (s *Subscription) GetUserID() uuid.UUID {
	return s.UserID
}

// GetStartDate returns the value of StartDate.
func (s *Subscription) GetStartDate() string {
	return s.StartDate
}

// GetEndDate returns the value of EndDate.
func (s *Subscription) GetEndDate() OptString {
	return s.EndDate
}

// SetID sets the value of ID.
func (s *Subscription) SetID(val int) {
	s.ID = val
}

// SetServiceName sets the value of ServiceName.
func (s *Subscription) SetServiceName(val string) {
	s.ServiceName = val
}

// SetPrice sets the value of Price.
func (s *Subscription) SetPrice(val int) {
	s.Price = val
}

// SetUserID sets the value of UserID.
func (s *Subscription) SetUserID(val uuid.UUID) {
	s.UserID = val
}

// SetStartDate sets the value of StartDate.
func (s *Subscription) SetStartDate(val string) {
	s.StartDate = val
}

// SetEndDate sets the value of EndDate.
func (s *Subscription) SetEndDate(val OptString) {
	s.EndDate = val
}

func (*Subscription) subscriptionIDGetRes()   {}
func (*Subscription) subscriptionIDPatchRes() {}
func (*Subscription) subscriptionPostRes()    {}

type SubscriptionCalculateTotalCostPostBadRequest Error

func (*SubscriptionCalculateTotalCostPostBadRequest) subscriptionCalculateTotalCostPostRes() {}

type SubscriptionCalculateTotalCostPostInternalServerError Error

func (*SubscriptionCalculateTotalCostPostInternalServerError) subscriptionCalculateTotalCostPostRes() {
}

type SubscriptionIDDeleteInternalServerError Error

func (*SubscriptionIDDeleteInternalServerError) subscriptionIDDeleteRes() {}

// SubscriptionIDDeleteNoContent is response for SubscriptionIDDelete operation.
type SubscriptionIDDeleteNoContent struct{}

func (*SubscriptionIDDeleteNoContent) subscriptionIDDeleteRes() {}

type SubscriptionIDDeleteNotFound Error

func (*SubscriptionIDDeleteNotFound) subscriptionIDDeleteRes() {}

type SubscriptionIDGetInternalServerError Error

func (*SubscriptionIDGetInternalServerError) subscriptionIDGetRes() {}

type SubscriptionIDGetNotFound Error

func (*SubscriptionIDGetNotFound) subscriptionIDGetRes() {}

type SubscriptionIDPatchBadRequest Error

func (*SubscriptionIDPatchBadRequest) subscriptionIDPatchRes() {}

type SubscriptionIDPatchInternalServerError Error

func (*SubscriptionIDPatchInternalServerError) subscriptionIDPatchRes() {}

type SubscriptionIDPatchNotFound Error

func (*SubscriptionIDPatchNotFound) subscriptionIDPatchRes() {}

type SubscriptionPostBadRequest Error

func (*SubscriptionPostBadRequest) subscriptionPostRes() {}

type SubscriptionPostInternalServerError Error

func (*SubscriptionPostInternalServerError) subscriptionPostRes() {}

// Результат подсчета суммарной стоимости подписок.
// Ref: #/components/schemas/TotalCostRes
type TotalCostRes struct {
	// Суммарная стоимость подписок в рублях.
	TotalCost OptInt `json:"total_cost"`
	// Количество учтенных подписок.
	Count OptInt `json:"count"`
}

// GetTotalCost returns the value of TotalCost.
func (s *TotalCostRes) GetTotalCost() OptInt {
	return s.TotalCost
}

// GetCount returns the value of Count.
func (s *TotalCostRes) GetCount() OptInt {
	return s.Count
}

// SetTotalCost sets the value of TotalCost.
func (s *TotalCostRes) SetTotalCost(val OptInt) {
	s.TotalCost = val
}

// SetCount sets the value of Count.
func (s *TotalCostRes) SetCount(val OptInt) {
	s.Count = val
}

func (*TotalCostRes) subscriptionCalculateTotalCostPostRes() {}

// Ref: #/components/schemas/UpdateSubscriptionReq
type UpdateSubscriptionReq struct {
	// Название сервиса, на который оформляется подписка.
	ServiceName OptString `json:"service_name"`
	// Цена подписки в рублях, без копеек.
	Price OptInt `json:"price"`
	// Идентификатор пользователя.
	UserID OptUUID `json:"user_id"`
	// Дата начала подписки в формате MM-YYYY.
	StartDate OptString `json:"start_date"`
	// Дата окончания подписки в формате MM-YYYY (опционально).
	EndDate OptString `json:"end_date"`
}

// GetServiceName returns the value of ServiceName.
func (s *UpdateSubscriptionReq) GetServiceName() OptString {
	return s.ServiceName
}

// GetPrice returns the value of Price.
func (s *UpdateSubscriptionReq) GetPrice() OptInt {
	return s.Price
}

// GetUserID returns the value of UserID.
func (s *UpdateSubscriptionReq) GetUserID() OptUUID {
	return s.UserID
}

// GetStartDate returns the value of StartDate.
func (s *UpdateSubscriptionReq) GetStartDate() OptString {
	return s.StartDate
}

// GetEndDate returns the value of EndDate.
func (s *UpdateSubscriptionReq) GetEndDate() OptString {
	return s.EndDate
}

// SetServiceName sets the value of ServiceName.
func (s *UpdateSubscriptionReq) SetServiceName(val OptString) {
	s.ServiceName = val
}

// SetPrice sets the value of Price.
func (s *UpdateSubscriptionReq) SetPrice(val OptInt) {
	s.Price = val
}

// SetUserID sets the value of UserID.
func (s *UpdateSubscriptionReq) SetUserID(val OptUUID) {
	s.UserID = val
}

// SetStartDate sets the value of StartDate.
func (s *UpdateSubscriptionReq) SetStartDate(val OptString) {
	s.StartDate = val
}

// SetEndDate sets the value of EndDate.
func (s *UpdateSubscriptionReq) SetEndDate(val OptString) {
	s.EndDate = val
}
