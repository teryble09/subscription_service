// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// SubscriptionCalculateTotalCostPost implements POST /subscription/calculate-total-cost operation.
//
// Вычисляет сумму всех подписок за выбранный период с
// фильтрацией по пользователю и названию сервиса.
//
// POST /subscription/calculate-total-cost
func (UnimplementedHandler) SubscriptionCalculateTotalCostPost(ctx context.Context, req *CalculateTotalCostReq) (r SubscriptionCalculateTotalCostPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SubscriptionGet implements GET /subscription operation.
//
// Возвращает список всех активных подписок.
//
// GET /subscription
func (UnimplementedHandler) SubscriptionGet(ctx context.Context) (r SubscriptionGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SubscriptionIDDelete implements DELETE /subscription/{id} operation.
//
// Удаляет подписку по указанному ID.
//
// DELETE /subscription/{id}
func (UnimplementedHandler) SubscriptionIDDelete(ctx context.Context, params SubscriptionIDDeleteParams) (r SubscriptionIDDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SubscriptionIDGet implements GET /subscription/{id} operation.
//
// Возвращает информацию о подписке по указанному ID.
//
// GET /subscription/{id}
func (UnimplementedHandler) SubscriptionIDGet(ctx context.Context, params SubscriptionIDGetParams) (r SubscriptionIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SubscriptionIDPatch implements PATCH /subscription/{id} operation.
//
// Обновляет существующую подписку.
//
// PATCH /subscription/{id}
func (UnimplementedHandler) SubscriptionIDPatch(ctx context.Context, req *UpdateSubscriptionReq, params SubscriptionIDPatchParams) (r SubscriptionIDPatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SubscriptionPost implements POST /subscription operation.
//
// Создает новую подписку для пользователя.
//
// POST /subscription
func (UnimplementedHandler) SubscriptionPost(ctx context.Context, req *CreateSubscriptionReq) (r SubscriptionPostRes, _ error) {
	return r, ht.ErrNotImplemented
}
